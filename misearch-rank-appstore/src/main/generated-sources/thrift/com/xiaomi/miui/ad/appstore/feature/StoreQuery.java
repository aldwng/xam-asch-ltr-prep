/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.miui.ad.appstore.feature;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class StoreQuery implements TBase<StoreQuery, StoreQuery._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("StoreQuery");

  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)1);
  private static final TField RECORD_NUM_FIELD_DESC = new TField("recordNum", TType.I32, (short)2);
  private static final TField IMEI_NUM_FIELD_DESC = new TField("imeiNum", TType.I32, (short)3);

  private String query;
  private int recordNum;
  private int imeiNum;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY((short)1, "query"),
    RECORD_NUM((short)2, "recordNum"),
    IMEI_NUM((short)3, "imeiNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // RECORD_NUM
          return RECORD_NUM;
        case 3: // IMEI_NUM
          return IMEI_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORDNUM_ISSET_ID = 0;
  private static final int __IMEINUM_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RECORD_NUM, new FieldMetaData("recordNum", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IMEI_NUM, new FieldMetaData("imeiNum", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(StoreQuery.class, metaDataMap);
  }

  public StoreQuery() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoreQuery(StoreQuery other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.recordNum = other.recordNum;
    this.imeiNum = other.imeiNum;
  }

  public StoreQuery deepCopy() {
    return new StoreQuery(this);
  }

  @Override
  public void clear() {
    this.query = null;
    setRecordNumIsSet(false);
    this.recordNum = 0;
    setImeiNumIsSet(false);
    this.imeiNum = 0;
  }

  public String getQuery() {
    return this.query;
  }

  public StoreQuery setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been asigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getRecordNum() {
    return this.recordNum;
  }

  public StoreQuery setRecordNum(int recordNum) {
    this.recordNum = recordNum;
    setRecordNumIsSet(true);
    return this;
  }

  public void unsetRecordNum() {
    __isset_bit_vector.clear(__RECORDNUM_ISSET_ID);
  }

  /** Returns true if field recordNum is set (has been asigned a value) and false otherwise */
  public boolean isSetRecordNum() {
    return __isset_bit_vector.get(__RECORDNUM_ISSET_ID);
  }

  public void setRecordNumIsSet(boolean value) {
    __isset_bit_vector.set(__RECORDNUM_ISSET_ID, value);
  }

  public int getImeiNum() {
    return this.imeiNum;
  }

  public StoreQuery setImeiNum(int imeiNum) {
    this.imeiNum = imeiNum;
    setImeiNumIsSet(true);
    return this;
  }

  public void unsetImeiNum() {
    __isset_bit_vector.clear(__IMEINUM_ISSET_ID);
  }

  /** Returns true if field imeiNum is set (has been asigned a value) and false otherwise */
  public boolean isSetImeiNum() {
    return __isset_bit_vector.get(__IMEINUM_ISSET_ID);
  }

  public void setImeiNumIsSet(boolean value) {
    __isset_bit_vector.set(__IMEINUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case RECORD_NUM:
      if (value == null) {
        unsetRecordNum();
      } else {
        setRecordNum((Integer)value);
      }
      break;

    case IMEI_NUM:
      if (value == null) {
        unsetImeiNum();
      } else {
        setImeiNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case RECORD_NUM:
      return new Integer(getRecordNum());

    case IMEI_NUM:
      return new Integer(getImeiNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case RECORD_NUM:
      return isSetRecordNum();
    case IMEI_NUM:
      return isSetImeiNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StoreQuery)
      return this.equals((StoreQuery)that);
    return false;
  }

  public boolean equals(StoreQuery that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_recordNum = true && this.isSetRecordNum();
    boolean that_present_recordNum = true && that.isSetRecordNum();
    if (this_present_recordNum || that_present_recordNum) {
      if (!(this_present_recordNum && that_present_recordNum))
        return false;
      if (this.recordNum != that.recordNum)
        return false;
    }

    boolean this_present_imeiNum = true && this.isSetImeiNum();
    boolean that_present_imeiNum = true && that.isSetImeiNum();
    if (this_present_imeiNum || that_present_imeiNum) {
      if (!(this_present_imeiNum && that_present_imeiNum))
        return false;
      if (this.imeiNum != that.imeiNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_query = true && (isSetQuery());
    builder.append(present_query);
    if (present_query)
      builder.append(query);

    boolean present_recordNum = true && (isSetRecordNum());
    builder.append(present_recordNum);
    if (present_recordNum)
      builder.append(recordNum);

    boolean present_imeiNum = true && (isSetImeiNum());
    builder.append(present_imeiNum);
    if (present_imeiNum)
      builder.append(imeiNum);

    return builder.toHashCode();
  }

  public int compareTo(StoreQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StoreQuery typedOther = (StoreQuery)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordNum()).compareTo(typedOther.isSetRecordNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordNum()) {
      lastComparison = TBaseHelper.compareTo(this.recordNum, typedOther.recordNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImeiNum()).compareTo(typedOther.isSetImeiNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImeiNum()) {
      lastComparison = TBaseHelper.compareTo(this.imeiNum, typedOther.imeiNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RECORD_NUM
          if (field.type == TType.I32) {
            this.recordNum = iprot.readI32();
            setRecordNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IMEI_NUM
          if (field.type == TType.I32) {
            this.imeiNum = iprot.readI32();
            setImeiNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      if (isSetQuery()) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
    }
    if (isSetRecordNum()) {
      oprot.writeFieldBegin(RECORD_NUM_FIELD_DESC);
      oprot.writeI32(this.recordNum);
      oprot.writeFieldEnd();
    }
    if (isSetImeiNum()) {
      oprot.writeFieldBegin(IMEI_NUM_FIELD_DESC);
      oprot.writeI32(this.imeiNum);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StoreQuery(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetRecordNum()) {
      if (!first) sb.append(", ");
      sb.append("recordNum:");
      sb.append(this.recordNum);
      first = false;
    }
    if (isSetImeiNum()) {
      if (!first) sb.append(", ");
      sb.append("imeiNum:");
      sb.append(this.imeiNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

