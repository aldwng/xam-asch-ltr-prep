/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.miui.ad.appstore.feature;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class QueryExtItem implements TBase<QueryExtItem, QueryExtItem._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryExtItem");

  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)1);
  private static final TField WEIGHT_FIELD_DESC = new TField("weight", TType.DOUBLE, (short)2);
  private static final TField QUERY_SEG_FIELD_DESC = new TField("querySeg", TType.LIST, (short)3);

  private String query;
  private double weight;
  private List<String> querySeg;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY((short)1, "query"),
    WEIGHT((short)2, "weight"),
    QUERY_SEG((short)3, "querySeg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // WEIGHT
          return WEIGHT;
        case 3: // QUERY_SEG
          return QUERY_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEIGHT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WEIGHT, new FieldMetaData("weight", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_SEG, new FieldMetaData("querySeg", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryExtItem.class, metaDataMap);
  }

  public QueryExtItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryExtItem(QueryExtItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.weight = other.weight;
    if (other.isSetQuerySeg()) {
      List<String> __this__querySeg = new ArrayList<String>();
      for (String other_element : other.querySeg) {
        __this__querySeg.add(other_element);
      }
      this.querySeg = __this__querySeg;
    }
  }

  public QueryExtItem deepCopy() {
    return new QueryExtItem(this);
  }

  @Override
  public void clear() {
    this.query = null;
    setWeightIsSet(false);
    this.weight = 0.0;
    this.querySeg = null;
  }

  public String getQuery() {
    return this.query;
  }

  public QueryExtItem setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been asigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public double getWeight() {
    return this.weight;
  }

  public QueryExtItem setWeight(double weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been asigned a value) and false otherwise */
  public boolean isSetWeight() {
    return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
  }

  public int getQuerySegSize() {
    return (this.querySeg == null) ? 0 : this.querySeg.size();
  }

  public java.util.Iterator<String> getQuerySegIterator() {
    return (this.querySeg == null) ? null : this.querySeg.iterator();
  }

  public void addToQuerySeg(String elem) {
    if (this.querySeg == null) {
      this.querySeg = new ArrayList<String>();
    }
    this.querySeg.add(elem);
  }

  public List<String> getQuerySeg() {
    return this.querySeg;
  }

  public QueryExtItem setQuerySeg(List<String> querySeg) {
    this.querySeg = querySeg;
    return this;
  }

  public void unsetQuerySeg() {
    this.querySeg = null;
  }

  /** Returns true if field querySeg is set (has been asigned a value) and false otherwise */
  public boolean isSetQuerySeg() {
    return this.querySeg != null;
  }

  public void setQuerySegIsSet(boolean value) {
    if (!value) {
      this.querySeg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Double)value);
      }
      break;

    case QUERY_SEG:
      if (value == null) {
        unsetQuerySeg();
      } else {
        setQuerySeg((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case WEIGHT:
      return new Double(getWeight());

    case QUERY_SEG:
      return getQuerySeg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case WEIGHT:
      return isSetWeight();
    case QUERY_SEG:
      return isSetQuerySeg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryExtItem)
      return this.equals((QueryExtItem)that);
    return false;
  }

  public boolean equals(QueryExtItem that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_querySeg = true && this.isSetQuerySeg();
    boolean that_present_querySeg = true && that.isSetQuerySeg();
    if (this_present_querySeg || that_present_querySeg) {
      if (!(this_present_querySeg && that_present_querySeg))
        return false;
      if (!this.querySeg.equals(that.querySeg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_query = true && (isSetQuery());
    builder.append(present_query);
    if (present_query)
      builder.append(query);

    boolean present_weight = true && (isSetWeight());
    builder.append(present_weight);
    if (present_weight)
      builder.append(weight);

    boolean present_querySeg = true && (isSetQuerySeg());
    builder.append(present_querySeg);
    if (present_querySeg)
      builder.append(querySeg);

    return builder.toHashCode();
  }

  public int compareTo(QueryExtItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryExtItem typedOther = (QueryExtItem)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = TBaseHelper.compareTo(this.weight, typedOther.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuerySeg()).compareTo(typedOther.isSetQuerySeg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuerySeg()) {
      lastComparison = TBaseHelper.compareTo(this.querySeg, typedOther.querySeg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // WEIGHT
          if (field.type == TType.DOUBLE) {
            this.weight = iprot.readDouble();
            setWeightIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // QUERY_SEG
          if (field.type == TType.LIST) {
            {
              TList _list68 = iprot.readListBegin();
              this.querySeg = new ArrayList<String>(_list68.size);
              for (int _i69 = 0; _i69 < _list68.size; ++_i69)
              {
                String _elem70;
                _elem70 = iprot.readString();
                this.querySeg.add(_elem70);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      if (isSetQuery()) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
    }
    if (isSetWeight()) {
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(this.weight);
      oprot.writeFieldEnd();
    }
    if (this.querySeg != null) {
      if (isSetQuerySeg()) {
        oprot.writeFieldBegin(QUERY_SEG_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.querySeg.size()));
          for (String _iter71 : this.querySeg)
          {
            oprot.writeString(_iter71);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryExtItem(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (isSetQuerySeg()) {
      if (!first) sb.append(", ");
      sb.append("querySeg:");
      if (this.querySeg == null) {
        sb.append("null");
      } else {
        sb.append(this.querySeg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

