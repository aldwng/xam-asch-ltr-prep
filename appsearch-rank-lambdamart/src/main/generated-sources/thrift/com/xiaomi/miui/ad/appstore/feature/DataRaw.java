/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.miui.ad.appstore.feature;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class DataRaw implements TBase<DataRaw, DataRaw._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DataRaw");

  private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)1);
  private static final TField APP_ID_FIELD_DESC = new TField("appId", TType.I64, (short)2);
  private static final TField EXPOSURE_FIELD_DESC = new TField("exposure", TType.I32, (short)3);
  private static final TField DOWNLOAD_FIELD_DESC = new TField("download", TType.I32, (short)4);
  private static final TField DTR_FIELD_DESC = new TField("dtr", TType.DOUBLE, (short)5);
  private static final TField LABEL_FIELD_DESC = new TField("label", TType.I32, (short)6);
  private static final TField QUERY_SEG_FIELD_DESC = new TField("querySeg", TType.LIST, (short)7);

  private String query;
  private long appId;
  private int exposure;
  private int download;
  private double dtr;
  private int label;
  private List<String> querySeg;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY((short)1, "query"),
    APP_ID((short)2, "appId"),
    EXPOSURE((short)3, "exposure"),
    DOWNLOAD((short)4, "download"),
    DTR((short)5, "dtr"),
    LABEL((short)6, "label"),
    QUERY_SEG((short)7, "querySeg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // APP_ID
          return APP_ID;
        case 3: // EXPOSURE
          return EXPOSURE;
        case 4: // DOWNLOAD
          return DOWNLOAD;
        case 5: // DTR
          return DTR;
        case 6: // LABEL
          return LABEL;
        case 7: // QUERY_SEG
          return QUERY_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __EXPOSURE_ISSET_ID = 1;
  private static final int __DOWNLOAD_ISSET_ID = 2;
  private static final int __DTR_ISSET_ID = 3;
  private static final int __LABEL_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new FieldMetaData("appId", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.EXPOSURE, new FieldMetaData("exposure", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DOWNLOAD, new FieldMetaData("download", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DTR, new FieldMetaData("dtr", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.LABEL, new FieldMetaData("label", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.QUERY_SEG, new FieldMetaData("querySeg", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DataRaw.class, metaDataMap);
  }

  public DataRaw() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataRaw(DataRaw other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.appId = other.appId;
    this.exposure = other.exposure;
    this.download = other.download;
    this.dtr = other.dtr;
    this.label = other.label;
    if (other.isSetQuerySeg()) {
      List<String> __this__querySeg = new ArrayList<String>();
      for (String other_element : other.querySeg) {
        __this__querySeg.add(other_element);
      }
      this.querySeg = __this__querySeg;
    }
  }

  public DataRaw deepCopy() {
    return new DataRaw(this);
  }

  @Override
  public void clear() {
    this.query = null;
    setAppIdIsSet(false);
    this.appId = 0;
    setExposureIsSet(false);
    this.exposure = 0;
    setDownloadIsSet(false);
    this.download = 0;
    setDtrIsSet(false);
    this.dtr = 0.0;
    setLabelIsSet(false);
    this.label = 0;
    this.querySeg = null;
  }

  public String getQuery() {
    return this.query;
  }

  public DataRaw setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been asigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public long getAppId() {
    return this.appId;
  }

  public DataRaw setAppId(long appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bit_vector.clear(__APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been asigned a value) and false otherwise */
  public boolean isSetAppId() {
    return __isset_bit_vector.get(__APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bit_vector.set(__APPID_ISSET_ID, value);
  }

  public int getExposure() {
    return this.exposure;
  }

  public DataRaw setExposure(int exposure) {
    this.exposure = exposure;
    setExposureIsSet(true);
    return this;
  }

  public void unsetExposure() {
    __isset_bit_vector.clear(__EXPOSURE_ISSET_ID);
  }

  /** Returns true if field exposure is set (has been asigned a value) and false otherwise */
  public boolean isSetExposure() {
    return __isset_bit_vector.get(__EXPOSURE_ISSET_ID);
  }

  public void setExposureIsSet(boolean value) {
    __isset_bit_vector.set(__EXPOSURE_ISSET_ID, value);
  }

  public int getDownload() {
    return this.download;
  }

  public DataRaw setDownload(int download) {
    this.download = download;
    setDownloadIsSet(true);
    return this;
  }

  public void unsetDownload() {
    __isset_bit_vector.clear(__DOWNLOAD_ISSET_ID);
  }

  /** Returns true if field download is set (has been asigned a value) and false otherwise */
  public boolean isSetDownload() {
    return __isset_bit_vector.get(__DOWNLOAD_ISSET_ID);
  }

  public void setDownloadIsSet(boolean value) {
    __isset_bit_vector.set(__DOWNLOAD_ISSET_ID, value);
  }

  public double getDtr() {
    return this.dtr;
  }

  public DataRaw setDtr(double dtr) {
    this.dtr = dtr;
    setDtrIsSet(true);
    return this;
  }

  public void unsetDtr() {
    __isset_bit_vector.clear(__DTR_ISSET_ID);
  }

  /** Returns true if field dtr is set (has been asigned a value) and false otherwise */
  public boolean isSetDtr() {
    return __isset_bit_vector.get(__DTR_ISSET_ID);
  }

  public void setDtrIsSet(boolean value) {
    __isset_bit_vector.set(__DTR_ISSET_ID, value);
  }

  public int getLabel() {
    return this.label;
  }

  public DataRaw setLabel(int label) {
    this.label = label;
    setLabelIsSet(true);
    return this;
  }

  public void unsetLabel() {
    __isset_bit_vector.clear(__LABEL_ISSET_ID);
  }

  /** Returns true if field label is set (has been asigned a value) and false otherwise */
  public boolean isSetLabel() {
    return __isset_bit_vector.get(__LABEL_ISSET_ID);
  }

  public void setLabelIsSet(boolean value) {
    __isset_bit_vector.set(__LABEL_ISSET_ID, value);
  }

  public int getQuerySegSize() {
    return (this.querySeg == null) ? 0 : this.querySeg.size();
  }

  public java.util.Iterator<String> getQuerySegIterator() {
    return (this.querySeg == null) ? null : this.querySeg.iterator();
  }

  public void addToQuerySeg(String elem) {
    if (this.querySeg == null) {
      this.querySeg = new ArrayList<String>();
    }
    this.querySeg.add(elem);
  }

  public List<String> getQuerySeg() {
    return this.querySeg;
  }

  public DataRaw setQuerySeg(List<String> querySeg) {
    this.querySeg = querySeg;
    return this;
  }

  public void unsetQuerySeg() {
    this.querySeg = null;
  }

  /** Returns true if field querySeg is set (has been asigned a value) and false otherwise */
  public boolean isSetQuerySeg() {
    return this.querySeg != null;
  }

  public void setQuerySegIsSet(boolean value) {
    if (!value) {
      this.querySeg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Long)value);
      }
      break;

    case EXPOSURE:
      if (value == null) {
        unsetExposure();
      } else {
        setExposure((Integer)value);
      }
      break;

    case DOWNLOAD:
      if (value == null) {
        unsetDownload();
      } else {
        setDownload((Integer)value);
      }
      break;

    case DTR:
      if (value == null) {
        unsetDtr();
      } else {
        setDtr((Double)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((Integer)value);
      }
      break;

    case QUERY_SEG:
      if (value == null) {
        unsetQuerySeg();
      } else {
        setQuerySeg((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case APP_ID:
      return new Long(getAppId());

    case EXPOSURE:
      return new Integer(getExposure());

    case DOWNLOAD:
      return new Integer(getDownload());

    case DTR:
      return new Double(getDtr());

    case LABEL:
      return new Integer(getLabel());

    case QUERY_SEG:
      return getQuerySeg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case APP_ID:
      return isSetAppId();
    case EXPOSURE:
      return isSetExposure();
    case DOWNLOAD:
      return isSetDownload();
    case DTR:
      return isSetDtr();
    case LABEL:
      return isSetLabel();
    case QUERY_SEG:
      return isSetQuerySeg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataRaw)
      return this.equals((DataRaw)that);
    return false;
  }

  public boolean equals(DataRaw that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_exposure = true && this.isSetExposure();
    boolean that_present_exposure = true && that.isSetExposure();
    if (this_present_exposure || that_present_exposure) {
      if (!(this_present_exposure && that_present_exposure))
        return false;
      if (this.exposure != that.exposure)
        return false;
    }

    boolean this_present_download = true && this.isSetDownload();
    boolean that_present_download = true && that.isSetDownload();
    if (this_present_download || that_present_download) {
      if (!(this_present_download && that_present_download))
        return false;
      if (this.download != that.download)
        return false;
    }

    boolean this_present_dtr = true && this.isSetDtr();
    boolean that_present_dtr = true && that.isSetDtr();
    if (this_present_dtr || that_present_dtr) {
      if (!(this_present_dtr && that_present_dtr))
        return false;
      if (this.dtr != that.dtr)
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (this.label != that.label)
        return false;
    }

    boolean this_present_querySeg = true && this.isSetQuerySeg();
    boolean that_present_querySeg = true && that.isSetQuerySeg();
    if (this_present_querySeg || that_present_querySeg) {
      if (!(this_present_querySeg && that_present_querySeg))
        return false;
      if (!this.querySeg.equals(that.querySeg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_query = true && (isSetQuery());
    builder.append(present_query);
    if (present_query)
      builder.append(query);

    boolean present_appId = true && (isSetAppId());
    builder.append(present_appId);
    if (present_appId)
      builder.append(appId);

    boolean present_exposure = true && (isSetExposure());
    builder.append(present_exposure);
    if (present_exposure)
      builder.append(exposure);

    boolean present_download = true && (isSetDownload());
    builder.append(present_download);
    if (present_download)
      builder.append(download);

    boolean present_dtr = true && (isSetDtr());
    builder.append(present_dtr);
    if (present_dtr)
      builder.append(dtr);

    boolean present_label = true && (isSetLabel());
    builder.append(present_label);
    if (present_label)
      builder.append(label);

    boolean present_querySeg = true && (isSetQuerySeg());
    builder.append(present_querySeg);
    if (present_querySeg)
      builder.append(querySeg);

    return builder.toHashCode();
  }

  public int compareTo(DataRaw other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DataRaw typedOther = (DataRaw)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExposure()).compareTo(typedOther.isSetExposure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExposure()) {
      lastComparison = TBaseHelper.compareTo(this.exposure, typedOther.exposure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownload()).compareTo(typedOther.isSetDownload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownload()) {
      lastComparison = TBaseHelper.compareTo(this.download, typedOther.download);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDtr()).compareTo(typedOther.isSetDtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtr()) {
      lastComparison = TBaseHelper.compareTo(this.dtr, typedOther.dtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(typedOther.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = TBaseHelper.compareTo(this.label, typedOther.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuerySeg()).compareTo(typedOther.isSetQuerySeg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuerySeg()) {
      lastComparison = TBaseHelper.compareTo(this.querySeg, typedOther.querySeg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // APP_ID
          if (field.type == TType.I64) {
            this.appId = iprot.readI64();
            setAppIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXPOSURE
          if (field.type == TType.I32) {
            this.exposure = iprot.readI32();
            setExposureIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DOWNLOAD
          if (field.type == TType.I32) {
            this.download = iprot.readI32();
            setDownloadIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DTR
          if (field.type == TType.DOUBLE) {
            this.dtr = iprot.readDouble();
            setDtrIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LABEL
          if (field.type == TType.I32) {
            this.label = iprot.readI32();
            setLabelIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // QUERY_SEG
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.querySeg = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.querySeg.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      if (isSetQuery()) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
    }
    if (isSetAppId()) {
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeI64(this.appId);
      oprot.writeFieldEnd();
    }
    if (isSetExposure()) {
      oprot.writeFieldBegin(EXPOSURE_FIELD_DESC);
      oprot.writeI32(this.exposure);
      oprot.writeFieldEnd();
    }
    if (isSetDownload()) {
      oprot.writeFieldBegin(DOWNLOAD_FIELD_DESC);
      oprot.writeI32(this.download);
      oprot.writeFieldEnd();
    }
    if (isSetDtr()) {
      oprot.writeFieldBegin(DTR_FIELD_DESC);
      oprot.writeDouble(this.dtr);
      oprot.writeFieldEnd();
    }
    if (isSetLabel()) {
      oprot.writeFieldBegin(LABEL_FIELD_DESC);
      oprot.writeI32(this.label);
      oprot.writeFieldEnd();
    }
    if (this.querySeg != null) {
      if (isSetQuerySeg()) {
        oprot.writeFieldBegin(QUERY_SEG_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.querySeg.size()));
          for (String _iter3 : this.querySeg)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataRaw(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetExposure()) {
      if (!first) sb.append(", ");
      sb.append("exposure:");
      sb.append(this.exposure);
      first = false;
    }
    if (isSetDownload()) {
      if (!first) sb.append(", ");
      sb.append("download:");
      sb.append(this.download);
      first = false;
    }
    if (isSetDtr()) {
      if (!first) sb.append(", ");
      sb.append("dtr:");
      sb.append(this.dtr);
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      sb.append(this.label);
      first = false;
    }
    if (isSetQuerySeg()) {
      if (!first) sb.append(", ");
      sb.append("querySeg:");
      if (this.querySeg == null) {
        sb.append("null");
      } else {
        sb.append(this.querySeg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

